import type { NextPage } from "next";
import Head from "next/head";
import { useCallback, useMemo } from "react";
import {
  Editable,
  withReact,
  Slate,
  RenderElementProps,
  RenderLeafProps,
} from "slate-react";
import isHotkey from "is-hotkey";
import { createEditor } from "slate";
import { withHistory } from "slate-history";
import { BlockButton, Element, Leaf, MarkButton } from "../ui";
import { HOTKEYS } from "../constants";
import { toggleMark } from "../utlis";
import { Container, Heading, Text, VStack, Wrap } from "@chakra-ui/react";
import { Feature } from "../constants";

type DynamicType = {
  [key: string]: string;
};

const Home: NextPage = () => {
  const renderElement = useCallback(
    (props: RenderElementProps) => <Element {...props} />,
    []
  );
  const renderLeaf = useCallback(
    (props: RenderLeafProps) => <Leaf {...props} />,
    []
  );
  const editor = useMemo(() => withHistory(withReact(createEditor())), []);

  const initialValue: any[] = [
    {
      type: "paragraph",
      children: [{ text: "Welcome to this simple text editor", bold: true }],
    },
  ];

  return (
    <div>
      <Head>
        <title>SlateJS Exploration</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container maxW="4xl">
          <VStack py={10} textAlign="center">
            <Heading>Joshua - SlateJS Exploration</Heading>
            <Text>A rich text editor based on SlateJS</Text>
          </VStack>
          <Slate editor={editor} value={initialValue}>
            <Wrap
              borderBottom="2px solid"
              borderColor="#CCCCCC"
              paddingBottom={4}
              marginBottom={4}
              marginTop={4}
            >
              {Feature.map((v) =>
                v.button === "mark" ? (
                  <MarkButton format={v.format} icon={v.icon} />
                ) : (
                  <BlockButton format={v.format} icon={v.icon} />
                )
              )}
            </Wrap>
            <Editable
              renderElement={renderElement}
              renderLeaf={renderLeaf}
              placeholder="Enter some rich textâ€¦"
              spellCheck
              autoFocus
              onKeyDown={(event) => {
                for (const hotkey in HOTKEYS) {
                  if (isHotkey(hotkey, event)) {
                    event.preventDefault();
                    const mark = (HOTKEYS as DynamicType)[hotkey];
                    toggleMark(editor, mark);
                  }
                }
              }}
            />
          </Slate>
        </Container>
      </main>
    </div>
  );
};

export default Home;
